@page "/choreWeek"

@using ChoreWorkerLib.Services
@using ChoreWorkerLib.Models
@inject ChoreService choreService
@inject WorkerService workerService

<h1>Chores by Worker and Week</h1>

@if (chores == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="SetSelectedWorker">
        @foreach (var worker in workers)
        {
            <option value="@worker.Id">@worker.Name</option>
        }
    </select>
    <select @onchange="SetSelectedMonday">
        @foreach(var dw in MondaysAndWeeks)
        {
            bool selected = false;
            if(dw.Key.Date == selectedDay.Date) { selected = true; }
        <option value="@dw.Key.ToShortDateString()" selected="selected">Week @dw.Value (@dw.Key.Date.ToShortDateString()- @dw.Key.Date.AddDays(6).Date.ToShortDateString())</option>
        }
    </select>
    <table cellpadding="1" cellspacing="1">
        <tr>
            <td align="center" width="14%"><b>M</b></td>
            <td align="center" width="14%"><b>T</b></td>
            <td align="center" width="14%"><b>W</b></td>
            <td align="center" width="14%"><b>T</b></td>
            <td align="center" width="14%"><b>F</b></td>
            <td align="center" width="14%"><b>S</b></td>
            <td align="center" width="14%"><b>S</b></td>
        </tr>
        @foreach (ChoreRow cr in choreRows)
        {
            <tr>
                <td width="100%" colspan="7">@cr.Name</td>
            </tr>
            <tr>
                <td align="center" width="14%">
                    @if (cr.WeekChores[1] != null)
                    {<button class="btn btn-@cr.WeekChores[1].State" @onclick="cr.WeekChores[1].CycleState">@cr.WeekChores[1].State.ToString().ToCharArray()[0]</button>}
                </td>
                <td align="center" width="14%">
                    @if (cr.WeekChores[2] != null)
                    {<button class="btn btn-@cr.WeekChores[2].State" @onclick="cr.WeekChores[2].CycleState">@cr.WeekChores[2].State.ToString().ToCharArray()[0]</button>}
                </td>
                <td align="center" width="14%">
                    @if (cr.WeekChores[3] != null)
                    {<button class="btn btn-@cr.WeekChores[3].State" @onclick="cr.WeekChores[3].CycleState">@cr.WeekChores[3].State.ToString().ToCharArray()[0]</button>}
                </td>
                <td align="center" width="14%">
                    @if (cr.WeekChores[4] != null)
                    {<button class="btn btn-@cr.WeekChores[4].State" @onclick="cr.WeekChores[4].CycleState">@cr.WeekChores[4].State.ToString().ToCharArray()[0]</button>}
                </td>
                <td align="center" width="14%">
                    @if (cr.WeekChores[5] != null)
                    {<button class="btn btn-@cr.WeekChores[5].State" @onclick="cr.WeekChores[5].CycleState">@cr.WeekChores[5].State.ToString().ToCharArray()[0]</button>}
                </td>
                <td align="center" width="14%">
                    @if (cr.WeekChores[6] != null)
                    {<button class="btn btn-@cr.WeekChores[6].State" @onclick="cr.WeekChores[6].CycleState">@cr.WeekChores[6].State.ToString().ToCharArray()[0]</button>}
                </td>
                <td align="center" width="14%">
                    @if (cr.WeekChores[0] != null)
                    {<button class="btn btn-@cr.WeekChores[0].State" @onclick="cr.WeekChores[0].CycleState">@cr.WeekChores[0].State.ToString().ToCharArray()[0]</button>}
                </td>
            </tr>
        }
    </table>
}

@code {
    private Chore[] chores;
    private Worker[] workers;
    private string selectedWorker;
    private DateTime today;
    private DateTime Monday;
    private DateTime selectedDay;
    private List<ChoreRow> choreRows = new List<ChoreRow>();
    private Dictionary<DateTime, int> MondaysAndWeeks;

    private async void SetSelectedWorker(ChangeEventArgs e)
    {
        selectedWorker = e.Value.ToString();
        await ChoreGetter();
    }
    private async void SetSelectedMonday(ChangeEventArgs e)
    {
        string selectedMonday = e.Value.ToString();
        selectedDay = DateTime.Parse(selectedMonday);
        await ChoreGetter();
    }

    private async Task Sort(string field)
    {
        choreService.SortChores(field);
        await ChoreGetter();

    }

    protected override async Task OnInitializedAsync()
    {

        today = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        Monday = today.Date.AddDays(-(int)today.Date.DayOfWeek + 1);

        workers = await workerService.GetWorkersAsync();
        MondaysAndWeeks = choreService.GetMondaysAndWeeks();
        if (workers != null)
            selectedWorker = workers[0].Id;

        if (!MondaysAndWeeks.ContainsKey(Monday))
            selectedDay = MondaysAndWeeks.Keys.First();
        else
            selectedDay = Monday;

        await ChoreGetter();
    }

    private async Task ChoreGetter()
    {
        chores = await choreService.GetChoresForSameWeek(selectedWorker, selectedDay);
        WeekMaker();
    }
    private void WeekMaker()
    {
        choreRows.Clear();
        // get a list of tasks
        List<string> choreNames = new List<string>();
        foreach (Chore c in chores)
        {
            if (!choreNames.Contains(c.Name))
            {
                choreNames.Add(c.Name);
                choreRows.Add(new ChoreRow() { Name = c.Name });
            }
        }
        foreach (ChoreRow cr in choreRows)
        {
            for (int i = 0; i < cr.WeekChores.Length; i++)
            {
                foreach (Chore c in chores)
                {
                    if (cr.Name == c.Name && c.Date.DayOfWeek == (DayOfWeek)i)
                    {
                        cr.WeekChores[i] = c;
                    }
                }


            }
        }

    }

    class ChoreRow
    {
        public string Name;
        public Chore[] WeekChores = new Chore[7];
    }
}
