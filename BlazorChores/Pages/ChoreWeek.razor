@page "/choreWeek"

@using ChoreWorkerLib.Services
@using ChoreWorkerLib.Models
@inject ChoreService choreService
@inject WorkerService workerService

<h1>Week View</h1>

@if (chores == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (workers != null)
    {
        <select @onchange="SetSelectedWorker">
            @foreach (var worker in workers)
            {
                <option value="@worker.Id">@worker.Name</option>
            }
        </select>
    }
    if (choreWeeks != null)
    {
        <select @onchange="SetSelectedWeek">
            @foreach (var choreWeek in choreWeeks)
            {
                if (choreWeek.Date.ToShortDateString() == selectedWeek)
                {
                    <option value="@choreWeek.Date.ToShortDateString()" selected>@choreWeek.ToString("dd.MM") - @choreWeek.AddDays(6).ToString("dd.MM")</option>
                }
                else
                {
                    <option value="@choreWeek.Date.ToShortDateString()">@choreWeek.ToString("dd.MM") - @choreWeek.AddDays(6).ToString("dd.MM")</option>
                }
            }
        </select>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Chore</th>
                <th>M</th>
                <th>T</th>
                <th>O</th>
                <th>T</th>
                <th>F</th>
                <th>S</th>
                <th>S</th>
            </tr>
        </thead>
        <tbody>
            @foreach (string choreName in choreNames)
            {
                List<Chore> sameName = chores.Where(c => c.Name == choreName).Select(c => c).AsEnumerable().ToList();

                selectedWeek = selectedWeek == null ? string.Empty : selectedWeek;

                DateTime firstDay = DateTime.Parse(selectedWeek);
                <tr class="tr-one">
                    <td>@choreName</td>
                    @for (int i = 0; i < 7; i++)
                    {
                        Chore thisChore = sameName.Where(c => c.Date == firstDay.AddDays(i)).FirstOrDefault();
                        if (thisChore == null)
                        {
                            <td><button class="btn btn-fake" disabled>@firstDay.AddDays(i).Day</button></td>
                        }
                        else
                        {
                            <td><button class="btn btn-@thisChore.State" disabled="@thisChore.Locked" @onclick="@thisChore.CycleState">@thisChore.Date.Day</button></td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
    <p><b>What do the colors mean?</b></p>
    <button class="btn btn-BLANK">BLANK</button>
    <button class="btn btn-DONE">DONE</button>
    <button class="btn btn-PAUSED">PAUSED</button>
    <button class="btn btn-NOTDONE">NOTDONE</button>
    <p>
        <b>The button does not work?</b><br />
        If a button is slight lighter and does not work, that means that this chore is locked and can no longer be changed.
    </p>
    

}

@code {
    private Chore[]? chores;

    private Worker[]? workers;

    private string? selectedWorker;

    private string? selectedWeek;

    private DateTime[]? choreWeeks;

    private List<string> choreNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Get all the chore weeks
        // actually a list of all mondays in weeks that have chores.
        choreWeeks = await choreService.GetWeeks();

        // Get all the worker
        workers = await workerService.GetWorkersAsync();

        // Select the first worker
        if (workers != null)
        {
            selectedWorker = workers[0].Id;
        }

        // Select the current week if it exists, or the latest week if not
        if (choreWeeks != null)
        {
            DateTime latestMonday = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day).AddDays(0 - DateTime.Now.DayOfWeek + 1);
            if (choreWeeks.Contains(latestMonday))
            {
                selectedWeek = latestMonday.ToShortDateString();
            }
            else
            {
                selectedWeek = choreWeeks[0].ToShortDateString();
            }
        }

        await UpdateChores();
    }

    private async void SetSelectedWorker(ChangeEventArgs e)
    {
        selectedWorker = e.Value.ToString();
        await UpdateChores();
    }

    private async void SetSelectedWeek(ChangeEventArgs e)
    {
        selectedWeek = e.Value.ToString();
        await UpdateChores();
    }

    private async Task UpdateChores()
    {
        this.selectedWorker = this.selectedWorker == null ? string.Empty : this.selectedWorker;
        this.selectedWeek = this.selectedWeek == null ? string.Empty : this.selectedWeek;

        chores = await choreService.GetChoresAsync(DateTime.Parse(selectedWeek), 6, selectedWorker);
        this.GetUniqueChoreNames();
    }

    private void GetUniqueChoreNames()
    {
        if (chores != null)
        {
            // Clear the list
            choreNames.Clear();

            foreach (Chore chore in chores)
            {
                if (!choreNames.Contains(chore.Name))
                {
                    choreNames.Add(chore.Name);
                }
            }

        }
    }

}
