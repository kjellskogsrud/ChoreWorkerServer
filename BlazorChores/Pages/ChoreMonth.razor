@page "/choreMonth"

@using ChoreWorkerLib.Services
@using ChoreWorkerLib.Models
@inject ChoreService choreService
@inject WorkerService workerService

<h3>Month View</h3>

@if (chores == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="SetSelectedWorker">
        @foreach (var worker in workers)
        {
            <option value="@worker.Id">@worker.Name</option>
        }
    </select>
    <select @onchange="SetSelectedMonth">
        @foreach (var cm in choreMonths)
        {
            if (cm.Date.ToShortDateString() == selectedMonth)
            {
                <option value="@cm.Date.ToShortDateString()" selected>@cm.Date.ToString("Y")</option>
            }
            else
            {
                <option value="@cm.Date.ToShortDateString()">@cm.Date.ToString("Y")</option>
            }
        }
    </select>
    <table class="table">
        <thead>
            <tr>
                <th><span class="sort-link" @onclick="@(() => Sort("Date"))">Date</span></th>
                <th><span class="sort-link" @onclick="@(() => Sort("Name"))">Name</span></th>
                <th><span class="sort-link" @onclick="@(() => Sort("Description"))">Description</span></th>
                <th>State</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Chore in chores)
            {
                <tr class="tr-one">
                    <td width="20%">@Chore.Date.ToShortDateString()</td>
                    <td width="20%">@Chore.Name</td>
                    <td width="50%">@Chore.Description</td>
                    <td width="10%" align="center"><button class="btn btn-@Chore.State" @onclick="Chore.CycleState">@Chore.State</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Chore[]? chores;
    private Worker[]? workers;
    private string? selectedWorker;
    private DateTime[]? choreMonths;
    private string? selectedMonth;


    private void SetSelectedWorker(ChangeEventArgs e)
    {
        selectedWorker = e.Value.ToString();
        UpdateChores();
    }
    private void Sort(string field)
    {
        choreService.SortChores(field);
        UpdateChores();
    }
    private void SetSelectedMonth(ChangeEventArgs e)
    {
        selectedMonth = e.Value.ToString();
        UpdateChores();
    }
    protected override async Task OnInitializedAsync()
    {
        // Get the chore months
        choreMonths = await choreService.GetMonths();
        workers = await workerService.GetWorkersAsync();

        // Select the first worker
        if (workers != null)
        {
            selectedWorker = workers[0].Id;
        }

        // Select the current month of it exists, or the latest month if not
        if (choreMonths != null)
        {
            DateTime today = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            if (choreMonths.Contains(today))
            {
                selectedMonth = today.ToShortDateString();
            }
            else
            {
                selectedMonth = choreMonths[0].ToShortDateString();
            }
        }

        UpdateChores();
    }
    private async void UpdateChores()
    {
        this.selectedMonth = this.selectedMonth == null ? string.Empty : this.selectedMonth;
        this.selectedWorker = this.selectedWorker == null ? string.Empty : this.selectedWorker;

        DateTime selectedMonth = DateTime.Parse(this.selectedMonth);

        chores = await choreService.GetChoresAsync(selectedMonth.Year, selectedMonth.Month, selectedWorker);
    }



}
