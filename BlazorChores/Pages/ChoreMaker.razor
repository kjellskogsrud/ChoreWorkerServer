@page "/choreMaker"

@using ChoreWorkerLib.Services
@using ChoreWorkerLib.Models
@inject ChoreService choreService
@inject WorkerService workerService

<h3>Chore Maker</h3>
<table>
<tr><td>From Date:</td><td><input type="date" @onchange="SetFromDate"/></td></tr>
<tr><td>To Date:</td><td><input type="date" @onchange="SetToDate" /></td></tr>
<tr><td>Name:</td><td><input type="text" @onchange="SetChoreName"/></td></tr>
<tr><td>Worker:</td><td>
    <select @onchange="SetSelectedWorker">
        @foreach (var worker in workers)
        {
            <option value="@worker.Id">@worker.Name</option>
        }
    </select>
</td></tr>
 <tr><td>Description:</td><td><input type="text" @onchange="SetChoreDescription" /></td></tr>
    <tr><td colspan="2"><button @onclick="MakeChores" disabled="@DisabledSubmit">Make Chores</button></td></tr>
</table>

<p>
    From: @fromDate.Date.ToShortDateString() to @toDate.Date.ToShortDateString()<br />
    Make chore called: @ChoreName for @workerService.GetWorkerById(selectedWorker).Name<br />
    Description: @ChoreDescription
</p>
<p>
    <select @onchange="SetSelectedMonth">
        @foreach (var cm in choreMonths)
        {
            <option value="@cm.Date.ToShortDateString()">@cm.Date.Month - @cm.Date.Year</option>
        }
    </select><br />
    There are <b>@choresCount</b> chores this month for the worker <b>@workerService.GetWorkerById(selectedWorker).Name</b><br />
    The expected value of these chores are <b>@workerValue</b>. The calculated value is <b>@Decimal.Round(calculatedChoreValue)</b>.
    <button @onclick="UpdateChoresValue">Update Value</button>
</p>


@code 
{

        DateTime fromDate;
        DateTime toDate;
    private string ChoreName;
    private string ChoreDescription;
    private bool DisabledSubmit = true;
    private string selectedWorker;
    private string selectedMonth;
    private Worker[] workers;
    private Chore[] chores;
    private DateTime[] choreMonths;
    private int choresCount;
    private decimal workerValue;
    private decimal calculatedChoreValue;

    private void SetFromDate(ChangeEventArgs e)
    {
        fromDate = DateTime.Parse(e.Value.ToString());
        ValidateInput();
    }
    private void SetToDate(ChangeEventArgs e)
    {
        toDate = DateTime.Parse(e.Value.ToString());
        ValidateInput();
    }
    private void SetChoreName(ChangeEventArgs e)
    {
        ChoreName = e.Value.ToString();
    }
    private void SetSelectedWorker(ChangeEventArgs e)
    {
        selectedWorker = e.Value.ToString();
        workerValue = workerService.GetWorkerById(selectedWorker).MonthlyChoreValue;
        choreGetter();
    }
    private void SetChoreDescription(ChangeEventArgs e)
    {
        ChoreDescription = e.Value.ToString();
    }
    private void UpdateChoresValue()
    {
        decimal eachChoreValue = workerValue / choresCount;
        for (int i = 0; i < chores.Length; i++)
        {
            chores[i].Value = eachChoreValue;
        }
        choreService.SerializeChores();
        GetChoresValue();
    }
    private void SetSelectedMonth(ChangeEventArgs e)
    {
        selectedMonth = e.Value.ToString();
        choreGetter();
        GetChoresValue();
    }
    private async void choreGetter()
    {

        chores = await choreService.GetChoresForMonth(selectedWorker, DateTime.Parse(selectedMonth));
        choresCount = chores.Length;
    }
    private void ValidateInput()
    {
        if (fromDate.Date <= toDate.Date)
            DisabledSubmit = false;
        else
            DisabledSubmit = true;
    }
    private decimal GetChoresValue()
    {
        calculatedChoreValue = 0;
        if (chores != null)
        {

            for (int i = 0; i < chores.Length; i++)
            {
                if (chores[i].Value != 0m)
                {
                    calculatedChoreValue = chores.Length * (decimal)chores[i].Value;
                    break;
                }
            }
        }
        return calculatedChoreValue;
    }

    protected override async Task OnInitializedAsync()
    {
        workers = await workerService.GetWorkersAsync();
        if (workers != null)
        {
            selectedWorker = workers[0].Id;
            workerValue = workerService.GetWorkerById(selectedWorker).MonthlyChoreValue;
        }
        // get the chore months
        choreMonths = choreService.GetMonths();
        GetChoresValue();
    }
    private void MakeChores()
    {
        choreService.MakeChores(fromDate, toDate, ChoreName, ChoreDescription, selectedWorker);
    }
}

